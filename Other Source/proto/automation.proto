syntax = "proto3";

package automation;

service AutomationService {
    // Unary RPC
    rpc ToggleDevice(ToggleDeviceRequest) returns (ToggleDeviceResponse);
    rpc SetSchedule(SetScheduleRequest) returns (SetScheduleResponse);

    // Server Streaming RPC:Server sends continuous updates on device status
    rpc StreamDeviceStatus(StreamDeviceStatusRequest) returns (stream DeviceStatusResponse);

    // Client Streaming RPC:The client sends multiple activation/deactivation requests and receives a single response
    rpc SendDeviceCommands(stream DeviceCommand) returns (CommandSummaryResponse);

    // Bidirectional Streaming RPC:Continuous communication between client and server for automation control
    rpc CommunicateWithDevice(stream DeviceMessage) returns (stream DeviceMessage);
}

message ToggleDeviceRequest {
    string device_id = 1;
    bool turn_on = 2;
}

message ToggleDeviceResponse {
    bool success = 1;
    string message = 2;
}

message SetScheduleRequest {
    string device_id = 1;
    string schedule_time = 2;
    bool turn_on = 3;
}

message SetScheduleResponse {
    bool success = 1;
    string message = 2;
}

// Server streaming
message StreamDeviceStatusRequest {
    string device_id = 1;
}

message DeviceStatusResponse {
    string status = 1;
    string timestamp = 2;
}

message DeviceCommand {
    string device_id = 1;
    string command = 2;
}

message CommandSummaryResponse {
    bool success = 1;
    int32 commands_received = 2;
}

message DeviceMessage {
    string device_id = 1;
    string message = 2;
}